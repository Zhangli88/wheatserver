{"name":"Wheatserver","tagline":"A C Implemented WSGI Server.","body":"Wheatserver(Alpha)\r\n===========\r\n\r\nFull stack sync/asyc(wait) IO Application Framework, help you build your own\r\napplication server.\r\n\r\nYou can use Wheatserver to develop web server, application proxy server and\r\ndb proxy server etc. You will enjoy using sync programming model to have\r\ngreat performance under async model.\r\n\r\nNow supporting WSGI, Static file distribute and Redis distribute.\r\n\r\n[中文文档](http://www.wzxue.com/wheatserver-2/)\r\n\r\nFeature\r\n===========\r\n\r\n* Fast: Full C implemented, and discards any module unnecessary and try to\r\navoid to copy data.\r\n\r\n* Low memory: Keep low memory and take actions to let multi worker processes\r\nshare read-only memory.\r\n\r\n* Pluggable: Worker type, protocol implement and application server all can be\r\nremove and add. You can construct your own worker, application server and\r\nother.\r\n\r\n* Statistic: You can use 'kill -s sigusr1 PID' command or tool to get statistic \r\ninformation from wheatserver.\r\n\r\n* Reload: If you change config file and apply it without restart wheatserver.\r\nOnly you need to do is 'kill -s sighup PID' let wheatserver reload file and\r\nreset workers.\r\n\r\n* Manage: Administrator can get information of running wheatserver by command\r\n  interface which can be accessed via client/client.py. You can get more info by\r\n  enter 'help' with running it.\r\n\r\n* Module extend: Module can define own statistic information, command(accessed\r\n  by Wheatserver client) and configuration in simple way. All module defines can\r\n  utilize Wheatserver's admin tools.\r\n\r\n* Simple: Try to hide complexity logical processing and provide simple\r\ninterfaces to developer.\r\n\r\n* Implemented:\r\n\r\n> Workers: Sync Worker and Async Worker\r\n\r\n> Protocol: Http 1.0 and Http 1.1, Redis protocol\r\n\r\n> Application Server: WSGI support and static file support both under Http,\r\n> Redis-cluster app support under Redis protocol\r\n\r\nBuild\r\n===========\r\n\r\nRequestments: python, python-dev \r\n\r\nSupport Platform: Linux,  Macosx\r\n\r\nSupport Web Service: WSGI\r\n\r\nshell > cd wheatserver\r\n\r\nshell > cd src\r\n\r\nshell > make\r\n\r\nRun\r\n===========\r\n\r\n-./wheatserver --app-project-path {your app path } --app-project-name {app filename} --app-name {callable object}\r\n\r\nConfig\r\n===========\r\n\r\n*Attention*: you must specify needed options under your choosing `protocol`\r\n\r\nSee [wheatserver.conf](https://github.com/yuyuyu101/wheatserver/blob/master/wheatserver.conf)\r\n\r\nWSGI Example(Sample)\r\n===========\r\n\r\n<pre>\r\n#sample.py which is in the wheatserver/src\r\nHELLO_WORLD = b\"Hello world!\\n\"\r\n\r\ndef simple_app(environ, start_response):\r\n    \"\"\"Simplest possible application object\"\"\"\r\n    status = '200 OK'\r\n    response_headers = [('Content-type', 'text/plain')]\r\n    start_response(status, response_headers)\r\n    return [HELLO_WORLD]\r\n</pre>\r\n\r\n-./wheatserver --app-project-name sample --app-name simple_app\r\n\r\nWSGI Example(Django)\r\n===========\r\n\r\n-My Django Project Directory:\r\n<pre>\r\n|-signup\r\n   |-wsgi.py\r\n   |-bin\r\n   |-include\r\n   |-lib\r\n   |-signup\r\n   |---activity\r\n   |-----fixtures\r\n   |-----static\r\n   |-------css\r\n   |-------img\r\n   |-------js\r\n   |---assets\r\n   |-----static\r\n   |---benefits\r\n   |-----templatetags\r\n   |---finance\r\n   |-----templatetags\r\n   |---fixtures\r\n   |---logs\r\n   |---match\r\n   |-----......\r\n   |---media\r\n   |-----......\r\n   |---snapboard\r\n   |-----.......\r\n   |---specialist\r\n   |-----static\r\n   |-------css\r\n   |-------js\r\n   |-----templates\r\n   |-------admin\r\n   |---------specialist\r\n   |---static\r\n   |---templates\r\n   |-----......\r\n   |---third_user\r\n   |-----static\r\n   |---settings.py\r\n   |---urls.py\r\n</pre>\r\n\r\nwsgi.py at the top of tree is the entry of Django WSGI.\r\n\r\n<pre>\r\nimport os, sys\r\n\r\nsys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'signup'))\r\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"signup.settings\")\r\n\r\n# This application object is used by the development server\r\n# as well as any WSGI server configured to use this file.\r\nfrom django.core.wsgi import get_wsgi_application\r\napplication = get_wsgi_application()\r\n</pre>\r\n\r\n-shell> ./wheatserver --app-project-path /Users/abcd/signup/ --app-module-name wsgi --app-name application\r\n\r\nAdmin management\r\n===========\r\n\r\nshell > client/client.py\r\n\r\nenter `help` to get command list and description\r\n\r\nSignals for controlling\r\n===========\r\n\r\n<pre>\r\n# using reload to send the signal\r\nkill -HUP `cat /tmp/wheatserver.pid`\r\n# using kill to send the signal\r\nkill -INT `cat /tmp/project-master.pid`\r\n</pre>\r\n\r\n<table>\r\n   <tr>\r\n      <td>Signal</td>\r\n      <td>Description</td>\r\n   </tr>\r\n   <tr>\r\n      <td>SIGHUP</td>\r\n      <td>reload configuration file, gracefully reload all the workers and the master process</td>\r\n   </tr>\r\n   <tr>\r\n      <td>SIGTERM</td>\r\n      <td>brutally kill all the workers and the master process</td>\r\n   </tr>\r\n   <tr>\r\n      <td>SIGINT</td>\r\n      <td>brutally kill the workers and the master process</td>\r\n   </tr>\r\n   <tr>\r\n      <td>SIGQUIT</td>\r\n      <td>gracefully kill the workers and the master process</td>\r\n   </tr>\r\n   <tr>\r\n      <td>SIGUSR1</td>\r\n      <td>print statistics</td>\r\n   </tr>\r\n   <tr>\r\n      <td>SIGUSR2</td>\r\n      <td>reexec the entire master process and spawn workers</td>\r\n   </tr>\r\n   <tr>\r\n      <td>SIGTTIN</td>\r\n      <td>add one to workernumber</td>\r\n   </tr>\r\n   <tr>\r\n      <td>SIGTTOU</td>\r\n      <td>subtraction of one from workernumber</td>\r\n   </tr>\r\n   <tr>\r\n      <td>SIGWINCH</td>\r\n      <td>only gracefully kill the workers and the master process backend</td>\r\n   </tr>\r\n</table>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}